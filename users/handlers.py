from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

import users.reply as rp
import admins.inline as ail
import users.inline as il
import admins.reply as akb

from states import *

from utils import QuestionCatRequests, AnswersRequests

from database.queries import *

from dotenv import dotenv_values
import os

dotenv = dotenv_values(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

SYSTEM_ADMINS = [int(dotenv['ADMIN_ID_1']), int(dotenv['ADMIN_ID_2']), int(dotenv['ADMIN_ID_3'])]


CHANNEL_ID = int(dotenv['CHANNEL_LINK'])

rt = Router()


@rt.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    data = await get_configs_data()
    await message.answer(f"{data[3]}")
    if message.chat.id in await get_all_consumers():
        await message.answer(f"–ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ?", reply_markup=await rp.main_keyboard(message.chat.id))
    else:
        await state.set_state(UserRegistration.contact)
        # await message.answer(f"{data[4]}", reply_markup=il.subscribe_channel)
        await message.answer("üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=rp.contact_number())


@rt.callback_query(F.data == 'check_subscription')
async def check_subscription(callback: CallbackQuery, state: FSMContext):
    member = await callback.message.bot.get_chat_member(CHANNEL_ID, callback.message.from_user.id)
    messages = await get_configs_data()

    if member.status == 'left':
        await callback.message.answer(f"{messages[4]}", reply_markup=il.subscribe_channel)
    else:
        await command_start_handler(callback.message, state)


@rt.message(UserRegistration.contact)
async def get_contact_handler(message: Message, state: FSMContext):
    if message.chat.id not in await get_all_consumers():
        await insert_consumer_data(message.chat.id, message.from_user.full_name)
        await insert_consumer_data_to_double_table(message.chat.id, message.from_user.full_name)
    if message.contact:
        await state.update_data(contact=f'{message.contact.phone_number}')
    elif message.text:
        await state.update_data(contact=message.text)
    await state.set_state(UserRegistration.full_name)
    await message.answer('üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')


@rt.message(UserRegistration.full_name)
async def get_fullname(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    data = await state.get_data()
    await insert_other_consumer_data(message.chat.id, data['contact'], data['full_name'])
    await insert_other_consumer_data_to_double_table(message.chat.id, data['contact'], data['full_name'])
    await message.answer('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    await message.answer(f"–ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ?", reply_markup=await rp.main_keyboard(message.chat.id))
    await state.clear()


@rt.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    await message.answer(f"‚¨ÖÔ∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ", reply_markup=await rp.main_keyboard(message.chat.id))


@rt.message(F.text == 'üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã')
async def contact_links(message: Message) -> None:
    data = await get_configs_data()
    await message.answer(f"{data[1]}", reply_markup=await il.contacts())


@rt.message(F.text == 'üìÉ –û –Ω–∞—Å')
async def contact_links(message: Message) -> None:
    data = await get_configs_data()
    await message.answer(f"{data[2]}")


@rt.message(F.text == '‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
async def contact_links(message: Message) -> None:
    await message.answer("‚ùì –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=await rp.questions_categories_keyboard())


@rt.message(QuestionCatRequests())
async def answer_message(message: Message):
    category_id = await get_id_of_category(message.text)
    await message.answer(f"‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ",
                         reply_markup=await rp.categories_questions_keyboard(int(category_id)))


@rt.message(AnswersRequests())
async def answer_questions(message: Message):
    answer = await get_answer_by_question(message.text)
    await message.answer(f"{answer}")


@rt.message(F.text == '‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
async def back_to_categories(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", reply_markup=await rp.questions_categories_keyboard())


@rt.message(F.text == 'üôã‚Äç‚ôÇÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å')
async def ask_my_question(message: Message, state: FSMContext):
    await state.set_state(OtherQuestions.message)
    await message.answer("üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:",
                         reply_markup=akb.cancel_operation())


@rt.message(OtherQuestions.message)
async def send_question(message: Message, state: FSMContext, bot: Bot):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.questions_categories_keyboard())
    else:
        try:
            for user in SYSTEM_ADMINS + [admin[1] for admin in await get_all_admins()]:
                if message.from_user.username:
                    await bot.send_message(chat_id=user,
                                           text=f"‚¨áÔ∏è <b>–í–∞–º –±—ã–ª –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}!</b>")
                else:
                    await bot.send_message(chat_id=user,
                                           text=f"‚¨áÔ∏è <b>–í–∞–º –±—ã–ª –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <i>{message.from_user.full_name}</i>!</b>")
                await message.send_copy(chat_id=user, reply_markup=ail.admin_answer(message.chat.id))
            await message.answer('‚úÖ –í–æ–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ù–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ –Ω–µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!',
                                 reply_markup=await rp.questions_categories_keyboard())
            await state.clear()
        except:
            await message.answer("–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                                 reply_markup=await rp.questions_categories_keyboard())
            await state.clear()


@rt.message(F.text == 'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å')
async def my_data(message: Message):
    consumer_data = await get_consumer_data(message.chat.id)
    await message.answer(f"{consumer_data[0]},\n\nüë§<b>–í–∞—à–µ –∏–º—è</b>\n<i>{consumer_data[1]}</i>\nüìû<b>–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n<i>{consumer_data[2]}</i>",
                         reply_markup=il.change_consumer_data)


@rt.callback_query(F.data == 'change_consumer_data')
async def alter_consumer_data(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AlterConsumerData.contact)
    await callback.message.answer("üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=rp.contact_number())


@rt.message(AlterConsumerData.contact)
async def change_contact_data(message: Message, state: FSMContext):
    if message.contact:
        await state.update_data(contact=f'{message.contact.phone_number}')
    elif message.text:
        await state.update_data(contact=message.text)
    await state.set_state(AlterConsumerData.full_name)
    await message.answer('üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', reply_markup=akb.cancel_operation())


@rt.message(AlterConsumerData.full_name)
async def get_fullname(message: Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå':
        await state.clear()
        await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.main_keyboard(message.chat.id))
    else:
        await state.update_data(full_name=message.text)
        data = await state.get_data()
        await insert_other_consumer_data(message.chat.id, data['contact'], data['full_name'])
        await insert_other_consumer_data_to_double_table(message.chat.id, data['contact'], data['full_name'])
        await message.answer('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup=await rp.main_keyboard(message.chat.id))
        await state.clear()