from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart

from aiogram.fsm.context import FSMContext

from database.queries import *

from states import *
from utils import *

import admins.reply as rp
import users.reply as urp

import admins.inline as il

from dotenv import dotenv_values
import os

dotenv = dotenv_values(os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env'))

rt = Router()


@rt.message(Admin(), F.text.in_(["üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å", "/admin", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]))
async def command_start_handler(message: Message):
    await message.answer(f"–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å", reply_markup=await rp.admin_panel(message.chat.id))


@rt.message(Admin(), F.text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
async def back_to_main_menu(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—â–µ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await urp.main_keyboard(message.chat.id))


@rt.message(Admin(), F.text == 'üìÉ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ')
async def alter_about_us_message(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=rp.cancel_operation())
    await state.set_state(AlterAboutUs.confirmation)


@rt.message(Admin(), AlterAboutUs.confirmation)
async def insert_new_description_message(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admin_panel(message.chat.id))
    else:
        await state.clear()
        await state.set_state(AlterAboutUs.message)
        await state.update_data(message=message.text)
        new_message = await state.get_data()
        print(new_message['message'])
        await insert_new_description(new_message['message'])
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admin_panel(message.chat.id))


@rt.message(Admin(), F.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏')
async def alter_contact_message(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=rp.cancel_operation())
    await state.set_state(AlterContact.confirmation)


@rt.message(Admin(), AlterContact.confirmation)
async def insert_new_contact_message(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admin_panel(message.chat.id))
    else:
        await state.clear()
        await state.set_state(AlterContact.message)
        await state.update_data(message=message.text)
        new_message = await state.get_data()
        print(new_message['message'])
        await insert_new_contact(new_message['message'])
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admin_panel(message.chat.id))


@rt.message(Admin(), F.text == 'üëã –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
async def alter_welcome_message(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=rp.cancel_operation())
    await state.set_state(AlterWelcomeMessage.message)


@rt.message(Admin(), AlterWelcomeMessage.message)
async def insert_new_welcome_message(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admin_panel(message.chat.id))
    else:
        await state.clear()
        await state.set_state(AlterWelcomeMessage.message)
        await state.update_data(message=message.text)
        new_message = await state.get_data()
        await insert_new_w_message(new_message['message'])
        await state.clear()
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admin_panel(message.chat.id))


@rt.message(Admin(), F.text == 'üëã –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def alter_welcome_message(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=rp.cancel_operation())
    await state.set_state(AlterNewComersMessage.message)


@rt.message(Admin(), AlterNewComersMessage.message)
async def insert_new_welcome_message(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admin_panel(message.chat.id))
    else:
        await state.clear()
        await state.set_state(AlterNewComersMessage.message)
        await state.update_data(message=message.text)
        new_message = await state.get_data()
        await insert_new_comers_message(new_message['message'])
        await state.clear()
        await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admin_panel(message.chat.id))


@rt.message(Admin(), F.text == 'üõ†‚ùì –ü—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å–∞–º–∏')
async def manage_faq(message: Message):
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=await rp.admins_categories())


@rt.message(Admin(), F.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def add_a_category(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", reply_markup=rp.cancel_operation())
    await state.set_state(CategoryAddition.category)


@rt.message(Admin(), CategoryAddition.category)
async def insert_category_handler(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admins_categories())
    else:
        await insert_category(message.text)
        await state.clear()
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admins_categories())


@rt.callback_query(Admin(), F.data.startswith('add_a_question_'))
async def add_a_question(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split('_')[-1])
    await state.set_state(FAQaddition.category)
    await state.update_data(category=category_id)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å: ", reply_markup=rp.cancel_operation())
    await state.set_state(FAQaddition.question)


@rt.message(Admin(), FAQaddition.question)
async def question_added(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admins_categories())
    else:
        await state.set_state(FAQaddition.question)
        await state.update_data(question=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç: ")
        await state.set_state(FAQaddition.answer)


@rt.message(Admin(), FAQaddition.answer)
async def add_answer(message: Message, state: FSMContext):
    await state.set_state(FAQaddition.answer)
    await state.update_data(answer=message.text)
    # await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –∏—Ö –Ω—É–∂–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∫ –æ—Ç–≤–µ—Ç—É\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´–ó–ê–í–ï–†–®–ò–¢–¨¬ª, –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    await message.answer("–í–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=await rp.admins_categories())
    data = await state.get_data()
    print(data)
    await insert_faq(data['question'], data['answer'], data['category'])
    await state.clear()


@rt.message(Admin(), F.text == 'watch db')
async def watch_db(message: Message):
    data = await get_configs_data()
    print(data)

# @rt.message(Admin(), FAQaddition.photo, F.photo)
# async def add_photos(message: Message, state: FSMContext):
#     data = await state.get_data()
#     photos = data.get("photo", [])
#     photos.append(message.photo[-1].file_id)
#     await state.update_data(photo=photos)
#     await message.answer("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∫–Ω–æ–ø–∫–æ–π ¬´–ó–ê–í–ï–†–®–ò–¢–¨¬ª –Ω–∏–∂–µ.")


# @rt.message(Admin(), F.text == '–ó–ê–í–ï–†–®–ò–¢–¨')
# async def insert_new_category(message: Message, state: FSMContext):
#     data = await state.get_data()
#     print(data)
#     name = data.get("name")
#     description = data.get("description")
#     photos = data.get("photos", [])
#
#     await state.clear()

@rt.message(AdminQuestionCatRequests())
async def manage_categories(message: Message):
    category_id = int(await get_id_of_category(message.text))
    await message.answer(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π:", reply_markup=await urp.admins_categories_questions_keyboard(category_id))
    await message.answer(f"{message.text}", reply_markup=await il.category_management(category_id))


@rt.callback_query(Admin(), F.data.startswith("category_edit_"))
async def edit_category(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split('_')[-1])
    await state.set_state(AlterCategory.id)
    await state.update_data(id=category_id)
    await state.set_state(AlterCategory.category)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=rp.cancel_operation())


@rt.message(AlterCategory.category)
async def apply_changes_category(message: Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admins_categories())
    else:
        await state.update_data(category=message.text)
        data = await state.get_data()
        await alter_category_title(data['category'], data['id'])
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup=await rp.admins_categories())
        await state.clear()


@rt.callback_query(Admin(), F.data.startswith('category_delete_'))
async def category_deletion(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[-1])
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?\n\n–í–æ–ø—Ä–æ—Å—ã —Å –Ω–µ–π —Ç–æ–∂–µ —É–¥–∞–ª—è—Ç—Å—è!",
                                           reply_markup=await il.delete_confirm(category_id))


@rt.callback_query(Admin(), F.data.startswith('deleteconfirm_'))
async def category_deletion_confirmed(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[-1])
    await delete_category(category_id)
    await callback.message.delete()
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admins_categories())


@rt.callback_query(Admin(), F.data == 'categories')
async def cancelled_action(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", reply_markup=await rp.admins_categories())


@rt.message(Admin(), F.text == '‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
async def back_to_categories(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", reply_markup=await rp.admins_categories())


@rt.message(AdminAnswersRequests())
async def answer_message(message: Message):
    answer = await get_answer_by_question(message.text)
    question_id = await get_question_id(message.text)
    await message.answer(f"{answer}", reply_markup=il.manage_question(question_id))


@rt.callback_query(Admin(), F.data.startswith('question_edit_'))
async def question_edit(callback: CallbackQuery, state: FSMContext):
    question_id = callback.data.split("_")[-1]
    await state.set_state(AlterQuestion.id)
    await state.update_data(id=int(question_id))
    await state.set_state(AlterQuestion.question)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å", reply_markup=rp.cancel_operation())


@rt.message(Admin(), AlterQuestion.question)
async def question_update(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admins_categories())
    else:
        await state.update_data(question=message.text)
        data = await state.get_data()
        await alter_question(data['id'], data['question'])
        await message.answer("–í–æ–ø—Ä–æ—Å –∏–∑–º–µ–Ω—ë–Ω", reply_markup=await rp.admins_categories())


@rt.callback_query(Admin(), F.data.startswith('change_question_cat_'))
async def change_question_category(callback: CallbackQuery, state: FSMContext):
    question_id = callback.data.split("_")[-1]
    await state.set_state(AlterFAQcategory.id)
    await state.update_data(id=int(question_id))
    await state.set_state(AlterFAQcategory.category)
    await callback.message.delete()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=await il.categories_selection())


@rt.callback_query(AlterFAQcategory.category)
async def apply_changes_to_categories_switch(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'categories_cancel':
        await state.clear()
        await callback.message.delete()
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", reply_markup=await rp.admins_categories())
    else:
        await state.update_data(category=int(callback.data.split("_")[-1]))
        data = await state.get_data()
        await alter_category(data['id'], data['category'])
        await callback.message.delete()
        await callback.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=await rp.admins_categories())
        await state.clear()


@rt.callback_query(Admin(), F.data.startswith('answer_edit_'))
async def answer_delete(callback: CallbackQuery, state: FSMContext):
    question_id = callback.data.split("_")[-1]
    await state.set_state(AlterAnswer.id)
    await state.update_data(id=int(question_id))
    await state.set_state(AlterAnswer.answer)
    await callback.message.delete()
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç", reply_markup=rp.cancel_operation())


@rt.message(Admin(), AlterAnswer.answer)
async def answer_update(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå":
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admins_categories())
    else:
        await state.update_data(answer=message.text)
        data = await state.get_data()
        await alter_answer(data['id'], data['answer'])
        await message.answer("–û—Ç–≤–µ—Ç –∏–∑–º–µ–Ω—ë–Ω", reply_markup=await rp.admins_categories())
        await state.clear()


@rt.callback_query(F.data.startswith('question_delete_'))
async def question_delete(callback: CallbackQuery):
    question_id = callback.data.split("_")[-1]
    await delete_question(int(question_id))
    await callback.message.delete()
    await callback.message.answer("–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω", reply_markup=await rp.admins_categories())


@rt.message(Admin(), F.text == '–ü—Ä–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏')
async def social_media(message: Message):
    await message.answer("–í–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:", reply_markup=await il.manage_social_media())


@rt.callback_query(Admin(), F.data == 'add_social_media')
async def add_social_media(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(SocialMediaAddition.name)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–æ—Ü—Å–µ—Ç–∏", reply_markup=rp.cancel_operation())


@rt.message(Admin(), SocialMediaAddition.name)
async def add_social_media_name(message: Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå':
        await state.clear()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=await rp.admin_panel(message.chat.id))
    else:
        await state.update_data(name=message.text)
        await state.set_state(SocialMediaAddition.link)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å–æ—Ü—Å–µ—Ç—å")


@rt.message(Admin(), SocialMediaAddition.link)
async def add_social_media_link(message: Message, state: FSMContext):
    if not links_filter(message.text):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É")
    else:
        await state.update_data(link=message.text)
        data = await state.get_data()
        await insert_social_media(data['name'], data['link'])
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admin_panel(message.chat.id))
        await state.clear()


@rt.callback_query(Admin(), F.data.startswith('edit_social_media_'))
async def single_social_media(callback: CallbackQuery):
    sm_id = int(callback.data.split('_')[-1])
    print(sm_id)
    data = await get_social_media_by_id(sm_id)
    await callback.message.edit_text(f"{data[0]}", reply_markup=await il.manage_single_sm(data[1], sm_id))


@rt.callback_query(Admin(), F.data == 'back_to_social_media')
async def back_to_social_media(callback: CallbackQuery):
    await callback.message.edit_text("–í–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:", reply_markup=await il.manage_social_media())


@rt.callback_query(Admin(), F.data.startswith('sm_delete_'))
async def sm_delete(callback: CallbackQuery):
    sm_id = int(callback.data.split('_')[-1])
    await delete_social_media(sm_id)
    await get_social_media_by_id(sm_id)
    await callback.message.edit_text("–°–æ—Ü—Å–µ—Ç—å —É–¥–∞–ª–µ–Ω–∞", reply_markup=await il.manage_social_media())


@rt.callback_query(Admin(), F.data.startswith("answer_to_"))
async def answer_asked_question(callback: CallbackQuery, state: FSMContext):
    receiver = int(callback.data.split("_")[2])
    await state.set_state(QuestionAnswer.to)
    await state.update_data(to=receiver)
    await state.set_state(QuestionAnswer.message)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")


@rt.message(Admin(), QuestionAnswer.message)
async def send_answer_to_asked_question(message: Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await rp.admin_panel(message.chat.id))
    else:
        try:
            await bot.send_message(chat_id=data['to'], text=f"‚¨áÔ∏è <b>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!</b>")
            await message.send_copy(chat_id=data['to'])
            await state.clear()
            await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admin_panel(message.chat.id))
        except:
            await message.answer("–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                                 reply_markup=await rp.admin_panel(message.chat.id))
            await state.clear()


@rt.message(MainAdmins(), F.text == 'üë• –°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞')
async def administration_manage(message: Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:", reply_markup=await il.admins_manage())


@rt.callback_query(MainAdmins(), F.data == 'staff')
async def administration_manage(callback: CallbackQuery):
    await callback.message.answer("–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞:", reply_markup=await il.admins_manage())


@rt.callback_query(MainAdmins(), F.data.startswith('manage_an_admin_'))
async def manage_admin(callback: CallbackQuery):
    admin_id = int(callback.data.split('_')[-1])
    data = await get_an_admin_by_id(admin_id)
    await callback.message.edit_text(f"{data[0]}, {data[1]}", reply_markup=il.manage_an_admin(admin_id))


@rt.callback_query(MainAdmins(), F.data.startswith('delete_an_admin_'))
async def delete_worker_handler(callback: CallbackQuery):
    admin_id = int(callback.data.split('_')[-1])
    await remove_admin(admin_id)
    await callback.message.edit_text("–†–∞–±–æ—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω", reply_markup=await il.admins_manage())


@rt.callback_query(MainAdmins(), F.data == 'add_a_worker')
async def add_a_worker(callback: CallbackQuery, state: FSMContext):
    await state.set_state(StaffAdd.telegram_id)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n–û–Ω –º–æ–∂–µ—Ç –µ–≥–æ –≤–∑—è—Ç—å —á–µ—Ä–µ–∑ https://t.me/getmyid_bot",
                                  reply_markup=rp.cancel_operation())


@rt.message(MainAdmins(), StaffAdd.telegram_id)
async def ask_workers_name(message: Message, state: FSMContext):
    if message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå':
        await state.clear()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=await il.admins_manage())
    else:
        await state.update_data(telegram_id=int(message.text))
        await state.set_state(StaffAdd.name)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞")


@rt.message(MainAdmins(), StaffAdd.name)
async def apply_change_to_staff(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    await insert_staff(data['telegram_id'], data['name'])
    await message.answer("–†–∞–±–æ—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!", reply_markup=await rp.admin_panel(message.chat.id))
    await state.clear()


@rt.message(Admin(), F.text == 'üì≤ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤')
async def display_all_clients(message: Message):
    all_clients = await get_all_done_consumers()
    for client in all_clients:
        await message.answer(f"{client[2]}\n\n<b>–ò–º—è</b>\n<i>{client[3]}</i>\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n<i>{client[4]}</i>",
                             reply_markup=il.delete_client(client[0]))
    await message.answer("‚¨ÜÔ∏è <b>–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ</b>")


@rt.callback_query(Admin(), F.data.startswith('delete_a_client_'))
async def delete_a_client_confirm(callback: CallbackQuery):
    client_id = int(callback.data.split('_')[-1])
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã?",
                                           reply_markup=il.client_delete_confirm(client_id))


@rt.callback_query(Admin(), F.data.startswith('client_delete_'))
async def delete_a_client_handler(callback: CallbackQuery):
    client_id = int(callback.data.split('_')[-1])
    await delete_a_client(client_id)
    await callback.message.edit_text("–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")


@rt.callback_query(Admin(), F.data.startswith('client_cancelled'))
async def cancel_deletion(callback: CallbackQuery):
    client_id = int(callback.data.split('_')[-1])
    client = await get_a_done_consumer(client_id)
    await callback.message.edit_text(
        f"{client[2]}\n\n<b>–ò–º—è</b>\n<i>{client[3]}</i>\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n<i>{client[4]}</i>",
        reply_markup=il.delete_client(client[0]))


@rt.message(Admin(), F.text == 'üì© –†–∞—Å—Å—ã–ª–∫–∞')
async def newsletter(message: Message, state: FSMContext) -> None:
    await state.set_state(NewsLetter.message)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞',
                         reply_markup=rp.cancel_operation())


@rt.message(Admin(), NewsLetter.message)
async def sending_to_all(message: Message, state: FSMContext) -> None:
    users = await get_all_consumers()
    if message.text in '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå':
        await state.clear()
        await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                                reply_markup=await rp.admin_panel(message.chat.id))
    else:
        for user in users:
            try:
                await message.send_copy(chat_id=user)
            except:
                pass
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º —É—Å–ø–µ—à–Ω–æ!', reply_markup=await rp.admin_panel(message.chat.id))
        await state.clear()